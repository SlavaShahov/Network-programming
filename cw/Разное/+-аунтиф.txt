#include <iostream>
#include <vector>
#include <string>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/select.h>
#include <cstring>
#include <algorithm>
#include <map>
#include <set>
#include <fstream>
#include <chrono>
#include <iomanip>
#include <sqlite3.h>
#include <openssl/sha.h>

#define MAX_CLIENTS 50
#define BUFFER_SIZE 1024
#define SALT "chat_server_salt"

using namespace std;

struct Client {
    int socket;
    string name;
    string current_room;
    bool authenticated;
};

struct Room {
    string name;
    set<int> clients;
};

map<string, Room> rooms;
map<int, Client> clients;

ofstream log_file("server_log.txt", ios::app);

// Функция для хеширования пароля с солью
string hashPassword(const string& password) {
    string salted = password + SALT;
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256((const unsigned char*)salted.c_str(), salted.length(), hash);
    
    stringstream ss;
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        ss << hex << setw(2) << setfill('0') << (int)hash[i];
    }
    
    return ss.str();
}

// Функция для работы с базой данных
sqlite3* openDatabase() {
    sqlite3* db;
    int rc = sqlite3_open("chat_server.db", &db);
    if (rc) {
        cerr << "Can't open database: " << sqlite3_errmsg(db) << endl;
        return nullptr;
    }
    
    // Создаем таблицу пользователей, если она не существует
    const char* sql = "CREATE TABLE IF NOT EXISTS users ("
                      "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                      "username TEXT UNIQUE NOT NULL, "
                      "password TEXT NOT NULL);";
    
    char* errMsg = 0;
    rc = sqlite3_exec(db, sql, 0, 0, &errMsg);
    if (rc != SQLITE_OK) {
        cerr << "SQL error: " << errMsg << endl;
        sqlite3_free(errMsg);
        sqlite3_close(db);
        return nullptr;
    }
    
    return db;
}

bool registerUser(const string& username, const string& password) {
    sqlite3* db = openDatabase();
    if (!db) return false;
    
    string hashedPassword = hashPassword(password);
    
    sqlite3_stmt* stmt;
    const char* sql = "INSERT INTO users (username, password) VALUES (?, ?);";
    
    int rc = sqlite3_prepare_v2(db, sql, -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        cerr << "Prepare failed: " << sqlite3_errmsg(db) << endl;
        sqlite3_close(db);
        return false;
    }
    
    sqlite3_bind_text(stmt, 1, username.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, hashedPassword.c_str(), -1, SQLITE_STATIC);
    
    rc = sqlite3_step(stmt);
    sqlite3_finalize(stmt);
    sqlite3_close(db);
    
    return rc == SQLITE_DONE;
}

bool authenticateUser(const string& username, const string& password) {
    sqlite3* db = openDatabase();
    if (!db) return false;
    
    string hashedPassword = hashPassword(password);
    
    sqlite3_stmt* stmt;
    const char* sql = "SELECT password FROM users WHERE username = ?;";
    
    int rc = sqlite3_prepare_v2(db, sql, -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        cerr << "Prepare failed: " << sqlite3_errmsg(db) << endl;
        sqlite3_close(db);
        return false;
    }
    
    sqlite3_bind_text(stmt, 1, username.c_str(), -1, SQLITE_STATIC);
    
    bool authenticated = false;
    if (sqlite3_step(stmt) == SQLITE_ROW) {
        string storedHash = (const char*)sqlite3_column_text(stmt, 0);
        if (hashedPassword == storedHash) {
            authenticated = true;
        }
    }
    
    sqlite3_finalize(stmt);
    sqlite3_close(db);
    
    return authenticated;
}

// Функция для получения текущей даты и времени в строковом формате
string getCurrentTime() {
    auto now = chrono::system_clock::now();
    auto time = chrono::system_clock::to_time_t(now);
    stringstream ss;
    ss << put_time(localtime(&time), "%Y-%m-%d %H:%M:%S");
    return ss.str();
}

void logMessage(const string& message) {
    if (log_file.is_open()) {
        log_file << "[" << getCurrentTime() << "] " << message << endl;
    }
}

void sendToClient(int client_socket, const string& message) {
    send(client_socket, message.c_str(), message.size(), 0);
}

void broadcastMessage(const string& room_name, const string& message, int exclude_socket = -1) {
    if (rooms.find(room_name) == rooms.end()) return;
    
    for (int client_socket : rooms[room_name].clients) {
        if (client_socket != exclude_socket) {
            sendToClient(client_socket, message);
        }
    }
}

vector<string> splitCommand(const string& command) {
    vector<string> args;
    string current;
    for (char c : command) {
        if (c == ' ') {
            if (!current.empty()) {
                args.push_back(current);
                current.clear();
            }
        } else {
            current += c;
        }
    }
    if (!current.empty()) {
        args.push_back(current);
    }
    return args;
}

void handleAuthCommand(int client_socket, const string& command) {
    vector<string> args = splitCommand(command);
    
    if (args.empty()) return;

    if (args[0] == "/register" && args.size() > 2) {
        string username = args[1];
        string password = args[2];
        
        if (registerUser(username, password)) {
            sendToClient(client_socket, "\033[32mРегистрация успешна. Теперь вы можете войти с помощью /login.\033[0m\n");
            logMessage("Новый пользователь зарегистрирован: " + username);
            cout << "[" << getCurrentTime() << "] " << "Новый пользователь зарегистрирован: " << username << endl;
        } else {
            sendToClient(client_socket, "\033[31mОшибка регистрации. Возможно, имя пользователя уже занято.\033[0m\n");
        }
    }
    else if (args[0] == "/login" && args.size() > 2) {
        string username = args[1];
        string password = args[2];
        
        if (authenticateUser(username, password)) {
            clients[client_socket].name = username;
            clients[client_socket].authenticated = true;
            sendToClient(client_socket, "\033[32mАвторизация успешна. Добро пожаловать, " + username + "!\033[0m\nИспользуйте /help для списка команд.\n");
            logMessage("Пользователь вошел в систему: " + username);
            cout << "[" << getCurrentTime() << "] " << "Пользователь вошел в систему: " << username << endl;
        } else {
            sendToClient(client_socket, "\033[31mНеверное имя пользователя или пароль.\033[0m\n");
        }
    }
    else {
        sendToClient(client_socket, "\033[31mДоступные команды:\n/register <имя> <пароль> - регистрация\n/login <имя> <пароль> - вход\033[0m\n");
    }
}

// Функция для обработки команд
void handleCommand(int client_socket, const string& command) {
    Client& client = clients[client_socket];
    
    if (!client.authenticated) {
        handleAuthCommand(client_socket, command);
        return;
    }
    
    vector<string> args = splitCommand(command);
    
    if (args.empty()) return;

    if (args[0] == "/create" && args.size() > 1) {
        string room_name = args[1];
        if (rooms.find(room_name) == rooms.end()) {
            rooms[room_name] = {room_name, {}};
            logMessage(client.name + " создал комнату: " + room_name);
            cout << "[" << getCurrentTime() << "] " << client.name << " создал комнату: " << room_name << endl;
            sendToClient(client_socket, "\033[32mКомната '" + room_name + "' создана.\033[0m\n");
        } else {
            sendToClient(client_socket, "\033[31mКомната '" + room_name + "' уже существует.\033[0m\n");
        }
        return;
    }
    else if (args[0] == "/join" && args.size() > 1) {
        string room_name = args[1];
        if (rooms.find(room_name) != rooms.end()) {
            if (!client.current_room.empty()) {
                rooms[client.current_room].clients.erase(client_socket);
                broadcastMessage(client.current_room, client.name + " покинул комнату.\n");
            }
            client.current_room = room_name;
            rooms[room_name].clients.insert(client_socket);
            logMessage(client.name + " присоединился к комнате: " + room_name);
            cout << "[" << getCurrentTime() << "] " << client.name << " присоединился к комнате: " << room_name << endl;
            broadcastMessage(room_name, client.name + " присоединился к комнате.\n");
            sendToClient(client_socket, "\033[32mВы вошли в комнату '" + room_name + "'.\033[0m\n");
        } else {
            sendToClient(client_socket, "\033[31mКомната '" + room_name + "' не найдена.\033[0m\n");
        }
        return;
    }
    else if (args[0] == "/leave") {
        if (!client.current_room.empty()) {
            string room_name = client.current_room;
            rooms[room_name].clients.erase(client_socket);
            logMessage(client.name + " покинул комнату: " + room_name);
            cout << "[" << getCurrentTime() << "] " << client.name << " покинул комнату: " << room_name << endl;
            broadcastMessage(room_name, client.name + " покинул комнату.\n");
            client.current_room = "";
            sendToClient(client_socket, "\033[32mВы вышли из комнаты.\033[0m\n");
        } else {
            sendToClient(client_socket, "\033[31mВы не находитесь в комнате.\033[0m\n");
        }
        return;
    }
    else if (args[0] == "/list") {
        string response = "\033[34mСписок комнат (" + to_string(rooms.size()) + "):\033[0m\n";
        for (const auto& room : rooms) {
            response += "\033[32m- " + room.first + " (" + to_string(room.second.clients.size()) + " участников)\033[0m\n";
        }
        sendToClient(client_socket, response);
        return;
    }
    else if (args[0] == "/users") {
        if (!client.current_room.empty()) {
            string response = "\033[34mУчастники комнаты '" + client.current_room + "':\033[0m\n";
            for (int socket : rooms[client.current_room].clients) {
                response += "\033[32m- " + clients[socket].name + "\033[0m\n";
            }
            sendToClient(client_socket, response);
        } else {
            sendToClient(client_socket, "\033[31mВы не находитесь в комнате.\033[0m\n");
        }
        return;
    }
    else if (args[0] == "/users_on_server") {
        string response = "\033[34mСписок пользователей на сервере:\033[0m\n";
        if (clients.empty()) {
            response += "\033[31mНа сервере нет подключенных пользователей.\033[0m\n";
        } else {
            for (const auto& client_entry : clients) {
                const Client& c = client_entry.second;
                if (c.authenticated) {
                    string room = c.current_room.empty() ? "Не в комнате" : c.current_room;
                    response += "\033[32m- " + c.name + " (комната: " + room + ")\033[0m\n";
                }
            }
        }
        sendToClient(client_socket, response);
        return;
    }
    else if (args[0] == "/logout") {
        if (client.authenticated) {
            string username = client.name;
            
            // Выход из комнаты, если находился в одной
            if (!client.current_room.empty()) {
                rooms[client.current_room].clients.erase(client_socket);
                broadcastMessage(client.current_room, username + " вышел из чата.\n");
                client.current_room = "";
            }
            
            client.name = "";
            client.authenticated = false;
            
            sendToClient(client_socket, "\033[32mВы вышли из аккаунта. Используйте /login или /register для новой авторизации.\033[0m\n");
            logMessage("Пользователь вышел из системы: " + username);
            cout << "[" << getCurrentTime() << "] " << "Пользователь вышел из системы: " << username << endl;
        } else {
            sendToClient(client_socket, "\033[31mВы не авторизованы.\033[0m\n");
        }
        return;
    }
    else if (args[0] == "/help") {
        string help_msg = 
            "\033[34mДоступные команды:\033[0m\n"
            "\033[32m/register <имя> <пароль>\033[0m - регистрация\n"
            "\033[32m/login <имя> <пароль>\033[0m   - вход\n"
            "\033[32m/logout\033[0m               - выйти из аккаунта\n"
            "\033[32m/create <название>\033[0m      - создать комнату\n"
            "\033[32m/join <название>\033[0m       - войти в комнату\n"
            "\033[32m/leave\033[0m                 - выйти из комнаты\n"
            "\033[32m/list\033[0m                  - список комнат\n"
            "\033[32m/users\033[0m                 - список участников текущей комнаты\n"
            "\033[32m/users_on_server\033[0m      - список всех пользователей на сервере\n"
            "\033[32m/pm <пользователь> <сообщение>\033[0m - отправить личное сообщение\n"
            "\033[32m/help\033[0m                  - справка\n";
        sendToClient(client_socket, help_msg);
        return;
    }
    else if (args[0] == "/pm" && args.size() > 2) {
        string target_name = args[1];
        string message = command.substr(command.find(' ', command.find(' ') + 1) + 1);
        bool user_found = false;
        for (const auto& client_entry : clients) {
            if (client_entry.second.authenticated && client_entry.second.name == target_name) {
                sendToClient(client_entry.first, "\033[33m[Личное сообщение от " + client.name + "]: " + message + "\033[0m\n");
                sendToClient(client_socket, "\033[33m[Личное сообщение для " + target_name + "]: " + message + "\033[0m\n");
                logMessage(client.name + " отправил личное сообщение пользователю " + target_name + ": " + message);
                cout << "[" << getCurrentTime() << "] " << client.name << " отправил личное сообщение пользователю " << target_name << ": " << message << endl;
                user_found = true;
                break;
            }
        }
        if (!user_found) {
            sendToClient(client_socket, "\033[31mПользователь с именем '" + target_name + "' не найден.\033[0m\n");
        }
        return;
    }
    else {
        if (!client.current_room.empty()) {
            string formatted_msg = client.name + ": " + command + "\n";
            broadcastMessage(client.current_room, formatted_msg, client_socket);
            logMessage(client.name + " отправил сообщение в комнату '" + client.current_room + "': " + command);
            cout << "[" << getCurrentTime() << "] " << client.name << " отправил сообщение в комнату '" << client.current_room << "': " << command << endl;
        } else {
            sendToClient(client_socket, "\033[31mВы не в комнате. Используйте /join или /create.\033[0m\n");
        }
    }
}

int main() {
    // Инициализация базы данных
    sqlite3* db = openDatabase();
    if (!db) {
        cerr << "Ошибка инициализации базы данных. Сервер не может быть запущен." << endl;
        return 1;
    }
    sqlite3_close(db);

    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};

    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    logMessage("Сервер запущен на порту 8080.");
    cout << "Сервер запущен на порту 8080." << endl;

    fd_set readfds;
    vector<int> client_sockets(MAX_CLIENTS, 0);

    while (true) {
        FD_ZERO(&readfds);
        FD_SET(server_fd, &readfds);
        int max_sd = server_fd;

        for (int i = 0; i < MAX_CLIENTS; i++) {
            int sd = client_sockets[i];
            if (sd > 0) {
                FD_SET(sd, &readfds);
            }
            if (sd > max_sd) {
                max_sd = sd;
            }
        }

        int activity = select(max_sd + 1, &readfds, NULL, NULL, NULL);

        if ((activity < 0) && (errno != EINTR)) {
            perror("select error");
        }

        if (FD_ISSET(server_fd, &readfds)) {
            if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
                perror("accept");
                exit(EXIT_FAILURE);
            }

            // Добавляем нового клиента (пока не аутентифицированного)
            clients[new_socket] = {new_socket, "", "", false};
            
            for (int i = 0; i < MAX_CLIENTS; i++) {
                if (client_sockets[i] == 0) {
                    client_sockets[i] = new_socket;
                    logMessage("Новое подключение (сокет: " + to_string(new_socket) + ")");
                    cout << "[" << getCurrentTime() << "] " << "Новое подключение (сокет: " << new_socket << ")" << endl;
                    sendToClient(new_socket, "\033[34mДобро пожаловать! Используйте /register или /login для авторизации.\033[0m\n");
                    break;
                }
            }
        }

        for (int i = 0; i < MAX_CLIENTS; i++) {
            int sd = client_sockets[i];
            if (FD_ISSET(sd, &readfds)) {
                int valread = read(sd, buffer, BUFFER_SIZE);
                if (valread == 0) {
                    getpeername(sd, (struct sockaddr*)&address, (socklen_t*)&addrlen);
                    if (clients[sd].authenticated) {
                        logMessage("Клиент отключился: " + clients[sd].name + " (сокет: " + to_string(sd) + ")");
                        cout << "[" << getCurrentTime() << "] " << "Клиент отключился: " << clients[sd].name << " (сокет: " << sd << ")" << endl;
                        if (!clients[sd].current_room.empty()) {
                            broadcastMessage(clients[sd].current_room, clients[sd].name + " вышел из чата.\n");
                            rooms[clients[sd].current_room].clients.erase(sd);
                        }
                    } else {
                        logMessage("Неаутентифицированное подключение закрыто (сокет: " + to_string(sd) + ")");
                        cout << "[" << getCurrentTime() << "] " << "Неаутентифицированное подключение закрыто (сокет: " << sd << ")" << endl;
                    }
                    close(sd);
                    client_sockets[i] = 0;
                    clients.erase(sd);
                } else {
                    buffer[valread] = '\0';
                    string message(buffer);
                    message.erase(remove(message.begin(), message.end(), '\n'), message.end());
                    message.erase(remove(message.begin(), message.end(), '\r'), message.end());
                    handleCommand(sd, message);
                }
            }
        }
    }

    return 0;
}
#include <iostream>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <string.h>
#include <thread>
#include <termios.h>
#include <unistd.h>

using namespace std;

void clearLine() {
    cout << "\r" << string(100, ' ') << "\r";
}

string getPassword() {
    termios oldt;
    tcgetattr(STDIN_FILENO, &oldt);
    termios newt = oldt;
    newt.c_lflag &= ~ECHO;
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);
    
    string password;
    getline(cin, password);
    
    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
    return password;
}

void readHandler(int sock) {
    char buffer[1024] = {0};
    while (true) {
        int valread = read(sock, buffer, sizeof(buffer)-1);
        if (valread > 0) {
            buffer[valread] = '\0';
            clearLine();
            cout << buffer;
            cout << "> " << flush;
        } else if (valread == 0) {
            cout << "\nСоединение с сервером разорвано\n";
            exit(0);
        } else {
            perror("Ошибка чтения");
            exit(1);
        }
    }
}

bool authenticate(int sock) {
    while (true) {
        cout << "Выберите действие:\n";
        cout << "1. Регистрация\n";
        cout << "2. Вход\n";
        cout << "> " << flush;
        
        string choice;
        getline(cin, choice);
        
        if (choice != "1" && choice != "2") {
            cout << "Неверный выбор. Попробуйте снова.\n";
            continue;
        }
        
        cout << "Имя пользователя: ";
        string username;
        getline(cin, username);
        
        cout << "Пароль: ";
        string password = getPassword();
        cout << endl;
        
        string command = (choice == "1" ? "/register " : "/login ") + username + " " + password;
        send(sock, command.c_str(), command.length(), 0);
        
        char response[1024] = {0};
        int bytes = read(sock, response, sizeof(response)-1);
        if (bytes > 0) {
            response[bytes] = '\0';
            cout << response;
            if (strstr(response, "Авторизация успешна") || strstr(response, "Регистрация успешна")) {
                return true;
            }
        }
    }
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        cerr << "Использование: " << argv[0] << " <IP> <порт>\n";
        return 1;
    }

    string server_ip = argv[1];
    int server_port = atoi(argv[2]);

    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        perror("Ошибка создания сокета");
        return -1;
    }

    struct sockaddr_in serv_addr;
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(server_port);

    if (inet_pton(AF_INET, server_ip.c_str(), &serv_addr.sin_addr) <= 0) {
        cerr << "Неверный адрес: " << server_ip << endl;
        close(sock);
        return -1;
    }

    cout << "Подключаемся к " << server_ip << ":" << server_port << "..." << endl;
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Ошибка подключения");
        close(sock);
        return -1;
    }

    if (!authenticate(sock)) {
        close(sock);
        return -1;
    }

    thread reader(readHandler, sock);
    reader.detach();

    string message;
    while (true) {
        cout << "> " << flush;
        getline(cin, message);
        
        if (message.empty()) continue; 
        if (message == "/exit") {
            break;
        }
        
        send(sock, message.c_str(), message.length(), 0);
    }

    close(sock);
    return 0;
}